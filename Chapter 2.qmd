---
title: "Chapter 2 - Working with Text Data"
format: html
execute:
    error: true
---

# 2 - Working with Text Data

## 2.1 Understanding word embeddings

We need to understand that LLMs cannot process raw text directly and instead need to be represented with continuous-valued vectors. The conversion is done through embeddings which take in the raw data, in the form of video, audio, text, etc. and converts them to a dense vector of continous values, which are then used in deep learning.

## 2.2 Tokenizing text

Before creating embeddings however, text data requires a preprocessing step to create tokens which is how we split input text up into pieces for an embedding layer. To summarize, we split an input text into individual tokens, which are either words or special characters, such as punctuation characters. These are later converted into token IDs (like a lookup table) which are then used to create embeddings.

```{python}
with open('the_verdict.txt', 'r',encoding='utf_8') as f:
    raw_text = f.read()

print('Total number of characters:', len(raw_text))
print(raw_text[:99])
```

Goal is to tokenize this 20479 character short story.

Then turn into embeddings for LLM training.

So use regex to get a list of individual words, whitespaces, and punctuation characters

```{python}
import re

text = 'Hello, world. This, is a test.'
result = re.split(r'(\s)',text)
print(result)
```

Now split on whitespaces and commas (\s), and periods (\[,.\])

```{python}
result = re.split(r'([,.]|\s)',text)
print(result)
```

We could remove whitespaces so we just have words, commas, and periods

```{python}
result = [item for item in result if item.strip()]
print(result)
```

::: callout-note
Potential experiment is to keep white spaces in the tokenizer and see the differences in model output. Think about how picky coding languages are when it comes to spacing!
:::

So now modify the tokenization scheme to work on other types of punction, such as question marks, quotation marks, and the double dashes shown in the first 100 characters.

```{python}
text = 'Hello, world. Is this-- a test?'
result = re.split(r'([,.:;?_!"()\']|--|\s)',text)
result = [item.strip() for item in result if item.strip()]
print(result)
```

Now apply to the entire short story

```{python}
preprocessed = re.split(r'([,.:;?_!"()\']|--|\s)',raw_text)
preprocessed = [item.strip() for item in preprocessed if item.strip()]
print(len(preprocessed))
print(preprocessed[:30])
```

## 2.3 Converting tokens into token IDs

We now take these tokens which are a Python string and convert them to an integer representation to produce token IDs. An intermediate step before going to embedding vectors. This mapping from tokens to token IDs requires a \`\`vocabulary''.

```{python}
all_words = sorted(set(preprocessed)) # Get all unique words
vocab_size = len(all_words)
print(vocab_size)
```

Let's show some of this lookup, it'll be a perfect use of a dictionary data type.

```{python}
vocab = {token:integer for integer, token in enumerate(all_words)}
for i, item in enumerate(vocab.items()):
    print(item)
    if i > 50:
        break
```

::: callout-tip
We will use an inverse of this to go from our token IDs back to the original words!
:::

Let's create a complete tokenizer class which can go both directions, `encode` method (string-to-integer) and `decode` (integer-to-string) method.

```{python}
class SimpleTokenizerV1:
    def __init__(self, vocab):
        # Store the vocab as a class attribute for access in the encode and decode methods
        self.str_to_int = vocab
        # Create an inverse vocabularly that maps token IDs back to the original text tokens
        self.int_to_str = {i:s for s, i in vocab.items()}

    # Process input text into token IDs
    def encode(self, text):
        preprocessed = re.split(r'([,.:;?_!"()\']|--|\s)',text) # Seperate words/punctution
        preprocessed = [item.strip() for item in preprocessed if item.strip()] # Remove white space
        ids = [self.str_to_int[s] for s in preprocessed] # Input string and get key from vocab dict
        return ids

    # Convert token IDs back to text
    def decode(self, ids):
        text = " ".join([self.int_to_str[i] for i in ids])
        # Replace spaces before the specified punctuation
        text = re.sub(r'\s+([,.?!"()\'])', r'\1', text)
        return text

```

-   `__init__:` This is the constructor method that initializes the class. It takes vocab as an argument.
    -   `self.str_to_int:` Stores the vocabulary dictionary where keys are strings (tokens) and values are integers (token IDs).
    -   `self.int_to_str:` Creates an inverse dictionary where keys are token IDs and values are the original strings (tokens).
-   `encode:` This method processes input text into token IDs.
    -   `re.split(r'([,.:;?_!"()\']|--|\s)', text):` Splits the text into words and punctuation based on the specified regular expression pattern.
    -   `[item.strip() for item in preprocessed if item.strip()]:` Strips whitespace from each item and removes empty strings.
    -   `[self.str_to_int[s] for s in preprocessed]:` Converts each token in the preprocessed list to its corresponding token ID using the str_to_int dictionary.
    -   `return ids:` Returns the list of token IDs.
-   `decode:` This method converts token IDs back to text.
    -   `" ".join([self.int_to_str[i] for i in ids]):` Joins the tokens corresponding to the token IDs into a single string with spaces in between.
    -   `re.sub(r'\s+([,.:;?_!"()\'])', r'\1', text):` Removes spaces before punctuation marks.
    -   `return text:` Returns the reconstructed text.

### Example

```{python}
vocab = {'hello': 1, 'world': 2, ',': 3}
tokenizer = SimpleTokenizerV1(vocab)

encoded = tokenizer.encode("hello, world")
print(encoded)  # Output: [1, 3, 2]

decoded = tokenizer.decode(encoded)
print(decoded)  # Output: "hello, world"
```

Back to the short story vocab

```{python}
vocab = {token:integer for integer, token in enumerate(all_words)}
tokenizer = SimpleTokenizerV1(vocab)

text = """"It's the last he painted, you know," Mrs. Gisburn said with pardonable pride."""

ids = tokenizer.encode(text)
print(ids)
```

The code above prints the following token IDs followed by the code below for the decoding

```{python}
print(tokenizer.decode(ids))
```

We can apply it to other text as well but be careful if any words are not in our vocab. This will cause an error!

```{python}
# text = 'Hello, do you like tea?'
# print(tokenizer.encode(text))
```

## 2.4 Adding special context tokens

This is how you will handle unknown words, but also to identify the end of the text.

```{python}
all_tokens = sorted(list(set(preprocessed)))
all_tokens.extend(['<|endoftext|>','<|unk|>']) # Add to vocab
vocab = {token:integer for integer, token in enumerate(all_tokens)}

print(len(vocab.items()))
```

The new vocab has increased by two!

```{python}
for i, item in enumerate(list(vocab.items())[-5:]):
    print(item)
```

Adjusting the tokenizer class from before

```{python}
class SimpleTokenizerV2:
    def __init__(self, vocab):
        self.str_to_int = vocab
        self.int_to_str = {i:s for s, i in vocab.items()}

    # Process input text into token IDs
    def encode(self, text):
        preprocessed = re.split(r'([,.:;?_!"()\']|--|\s)',text) # Seperate words/punctution
        preprocessed = [item.strip() for item in preprocessed if item.strip()] # Remove white space
        # Replace unknown words with <|unk|> tokens
        preprocessed = [item if item in self.str_to_int else "<|unk|>" for item in preprocessed] 

        ids = [self.str_to_int[s] for s in preprocessed] # Input string and get key from vocab dict
        return ids

    # Convert token IDs back to text
    def decode(self, ids):
        text = " ".join([self.int_to_str[i] for i in ids])
        # Replace spaces before the specified punctuation
        text = re.sub(r'\s+([,.?_!"()\'])', r'\1', text)
        return text
```

Now let's try the new tokenzier out on two independent and unrelated sentances that are concacted togther.

```{python}
text1 = 'Hello, do you like tea?'
text2 = 'In the sunlit terraces of the palace.'
text = ' <|endoftext|> '.join([text1,text2])
print(text)
```

Let's tokenize!

```{python}
tokenizer = SimpleTokenizerV2(vocab)
print(tokenizer.encode(text))
```

And detokenize to check!

```{python}
print(tokenizer.decode(tokenizer.encode(text)))
```

Depending on the LLM, some researchers implement additional special tokens such as:

-   `[BOS]` *(beginning of sequence)*-- This token marks the start of a text.

-   `[EOS]` *(end of sequence)*-- This token is positioned at the end of a text and is especially useful when concatenating multiple unrelated texts, similar to `<|endoftext|>`

-   `[PAD]` *(padding)*-- When training LLMs with batch sizes larger than one, the batch might contain texts of varying lengths. To ensure all texts have the same length, the shorter texts are extended or "padded": using the *`[PAD]`* token, up to the length of the longest text in the batch.

The tokenizer used for the GPT models does not need any of these tokens; it only uses an `<|endoftext|>` token for simplicity. `<|endoftext|>` is analogous to the `[EOS]` token. `<|endoftext|>` is also useful for padding. However, when training on batched inputs, we typically use a mask, meaning we don't attend to padded tokens. Therefore the specific token chosen for padding becomes inconsequential.

Moreover, the tokenizer used for GPT models also doesn't use an `<|unk|>` token for out-of-vocabularly words. Instead, GPT models use a *byte pair encoding* tokenizer, which breaks words down into subword units. 

## 2.5 Byte pair encoding (BPE)
BPE tokenizer was used in GPT-2 and GPT-3. Since it's a bit complicated, we will use an open source library called [tiktoken](https://github.com/openai/tiktoken) which implements the BPE algorithm efficienctly in Rust.

```{python}
from importlib.metadata import version
import tiktoken
print('tiktoken version:', version('tiktoken'))
```

Once installed, we can instatiate the BPE tokenizer from tiktoken as follows:

```{python}
tokenizer = tiktoken.get_encoding('gpt2')
```

The usage of this tokenizer is very similar to the `SimpleTokenizerV2` we implemented previously with an `encode` method:

```{python}
text = (
    "Hello, do you like tea? <|endoftext|> In the sunlit terraces of someunknownPlace.")
integers = tokenizer.encode(text,allowed_special = {'<|endoftext|>'})
print(integers)
```

Which we can convert back to text with a `decode` method:

```{python}
strings = tokenizer.decode(integers)
print(strings)
```

Two things about this. First, `<|endoftext|>` is a relatively large token ID at `50256`. The BPE tokenizer actually has a total vocabularly size of 50,257, with `<|endoftext|>` being the largest token ID.

Second, the BPE tokenizer encodes and decodes unknown words, such as `someunknownPlace` correctly. The BPE tokenizer can handle any uknown word. The algorithm underlying BPE breaks down words that aren't in its predefined vocabularly into smaller subword units or even individual characters, enabling it to handle out-of-vocabularly words. Which means it can process any text, even if it contains words that were not present in the training data. 

::: {.callout-note collapse="true"}
## Exercise 2.1 Byte pair encoding of unkown words

Try the BPE tokenizer from the tiktoken library on the unknown words "Akwirw ier" and print the individual token IDs. Then, call the decode function on each of the resulting  integers in this list. Lastly, call the  decode method on the token IDs to check whether it can reconstruct the original input, "Akwirw ier"

```{python}
print(tokenizer.encode('Akwirw ier'))
for individual_token in tokenizer.encode('Akwirw ier'):
    print(tokenizer.decode_single_token_bytes(individual_token))
    # b in front of strings indicates that the strings are byte strings.
print(tokenizer.decode(tokenizer.encode('Akwirw ier')))
```

:::

## 2.6 Data sampling with a sliding window

Let's implement a data loader that fetches the input-target pairs from the training dataset using a sliding window approach. Basically since the next word is always being predicted the window includes all the text "it has seen", then receieves the next word for the prediction, then at the next iteration that predicted word is revealed and added to the input window.

```{python}
with open('the_verdict.txt','r',encoding='utf-8') as f:
    raw_text = f.read()

enc_text = tokenizer.encode(raw_text)
print(len(enc_text))
# Remove the first 50 tokens from the dataset for demostration purposes. 
enc_sample = enc_text[50:]
```

Easiest way to create the input-target pairs for the next-word prediction task is to create two variables. It mirrors traditional supervised learning of having a variable `x` and a response `y`.

```{python}
context_size = 4 # The context size determines how many tokens are in the input
x = enc_sample[:context_size]
y = enc_sample[1:context_size+1]
print(f'x: {x}')
print(f'y:      {y}')
```

So the samples provided to the model for how we are going to predict are: 

```{python}
for i in range(1, context_size+1):
    context = enc_sample[:i]
    desired = enc_sample[i]
    print(context,'---->',desired)
    print(tokenizer.decode(context),'---->',tokenizer.decode([desired]))
```
Ok so these two concepts need to be implemented into a PyTorch data loader so there needs to be an `x` tensor which is the length of the context size and the `y` tensor which are the targets (`x` shifted over 1) which are also the length of the context size. 

```{python}
import torch
from torch.utils.data import Dataset, DataLoader
# A dataset for batched inputs and targets
class GPTDatasetV1(Dataset):
    def __init__(self, txt, tokenizer, max_length, stride):
        self.input_ids = []
        self.target_ids = []

        token_ids = tokenizer.encode(txt)
        # Implement logic from earlier with x and y
        # Sliding window to chunk text into overlapping sequences of max length
        for i in range(0, len(token_ids) - max_length, stride):
            input_chunk = token_ids[i : i + max_length]
            target_chunk = token_ids[i + 1: i + max_length + 1]
            self.input_ids.append(torch.tensor(input_chunk))
            self.target_ids.append(torch.tensor(target_chunk))
    # Return total number of rows in dataset
    def __len__(self):
        return len(self.input_ids)
    # REturns a single row from teh dataset
    def __getitem__(self, idx):
        return self.input_ids[idx], self.target_ids[idx]
```

The `GPTDatasetV1` class is based on the PyTorch `Dataset` class and efines how indvidual rows are fetched from the dataset, where each row consists of a number of token IDs (based on `max_length`) assigned to an `input_chunk` tensor. The `target_chunk` tensor contains the corresponding targets. Now this will be implemented into a PyTorch dataloader.


```{python}
# A data loader to generate batches with input-target pairs
def create_dataloader_v1(txt, batch_size = 4, max_length = 256, stride= 128, shuffle=True, drop_last = True, num_workers = 0):
    # Initialize tokenizer
    tokenizer = tiktoken.get_encoding('gpt2')
    # Create dataset
    dataset = GPTDatasetV1(txt, tokenizer, max_length,stride)
    dataloader  = DataLoader(dataset, batch_size=batch_size,shuffle=shuffle,drop_last=drop_last,num_workers=num_workers)
    # drop_last=True drops the last batch if its shorter than the specified batch_size to prevent loss spikes during training
    # num_workers is the number of CPU processes to use for preprocessing
    return dataloader
```

Testing the `dataloader` with a batch size of 1 for an LLM with a context size of 4 to develop an intuition of how the `GPTDatasetV1` class from listing 2.5 and the `create_dataloader_v1` function work together.

```{python}
with open('the_verdict.txt','r',encoding='utf-8') as f:
    raw_text = f.read()

dataloader = create_dataloader_v1(
    raw_text, batch_size=1, max_length=4, stride=1, shuffle=False)
data_iter = iter(dataloader)
first_batch = next(data_iter)
print(first_batch)
```
`first_batch` variable is two tensors: the first stores the input token IDs and the second contains the target token IDs. Since the `max_length` is set of 4, each of the two tensors is length 4. Typically an LLM is trained on inputs of size 256 and up. 

The `stride` is how much each batch is shifted from each other.

```{python}
second_batch = next(data_iter)
print(second_batch)
```

A few examples to play with the dataloader function.

```{python}
dataloader = create_dataloader_v1(
    raw_text, batch_size=1, max_length=3, stride=2, shuffle=False)
data_iter = iter(dataloader)
first_batch = next(data_iter)
print(first_batch)
second_batch = next(data_iter)
print(second_batch)
```

::: {.callout-note collapse="true"}
## Exercise 2.2 Data loaders with different stides and context sizes

To develop more intution for how the data loader works, try to run it with differnt settings such as `max_length=2` and `stride=2`, and `max_length=8` and `stride=2`.

```{python}
dataloader = create_dataloader_v1(
    raw_text, batch_size=1, max_length=2, stride=2, shuffle=False)
data_iter = iter(dataloader)
print(next(data_iter))
print(next(data_iter))

dataloader = create_dataloader_v1(
    raw_text, batch_size=1, max_length=8, stride=2, shuffle=False)
data_iter = iter(dataloader)
print(next(data_iter))
print(next(data_iter))
```

:::

Batch sizes of 1, such as observed so far, are useful for illustration. In dep learning, small batch sizes require less memory during training but lead to more noisy model updates. 

An example of using a larger batch size in the current data loader. 

```{python}
# Setting stride to 4 so each input is not overlapping (overfitting) but also not skipping any words (using whole dataset)
dataloader = create_dataloader_v1(
    raw_text, batch_size=8, max_length=4, stride=4, shuffle=False)
data_iter = iter(dataloader)
inputs, targets = next(data_iter)
print(f'Inputs with shape {inputs.shape}\n', inputs)
print(f'\nTargets with shape {targets.shape}\n',targets)
```

## 2.7 Creating token embeddings
The last step to prepare the input text for LLM training is to convert the token IDs into embedding vectors. Initially the weights for the embeddings are random, but then are trained in the learning process. 

A continuous vector representation, or embedding, is necessary since GPT-like LLMs are deep neural networks trained with the backpropagation algorithm. 

Assume you begin with the following input token with IDs 2,3,5, and 1.

```{python}
input_ids = torch.tensor([2,3,5,1])
```
Then the vocabularly is small with only 6 words (BPE has 50,257) and create embeddings of size 3 (in GPT-3 the embedding size is 12,288 dimensions)

```{python}
vocab_size = 6
output_dim = 3
# Set seed for reproducibility
torch.manual_seed(123)
embedding_layer = torch.nn.Embedding(num_embeddings=vocab_size,embedding_dim=output_dim) # num_embeddings is number of words in vocab, embedding_dim is number of embedding dimensions]
print(f'Dimensions of embeddings {embedding_layer.weight.shape}\n',embedding_layer.weight)
```

The weight matrix is full of small, random values. Which is become optimized during LLM training. Each row is for each of the six possible tokens in the vocabularly, and there is one column for each of the three embedding dimensions. 

Now apply it to a token ID to obtain an embedding vector. 

```{python}
print(embedding_layer(torch.tensor([3])))
```

When compared to previous embedding matrix with all 6 words in the vocabularly, we can see this row corresponds to the 4th row (index 3). So essentially the embedding layer is a lookup operation that retrieves rows from the embedding layer's weight matrix via a token ID. You give it a token ID, it looks up what row to return to give a continuous value to represent it and feed into the LLM.


```{python}
print(f'Dimensions of embeddings {embedding_layer.weight.shape}\n',embedding_layer.weight)
print(embedding_layer(torch.tensor([3])))
```

::: callout-note
When looking at embeddings compared to one-hot encoding, the embedding layer approach is essentially a more efficient way of implementing one-hot encoding followed by matrix multiplication in a fully connected layer. See [this link](https://github.com/rasbt/LLMs-from-scratch/blob/main/ch02/03_bonus_embedding-vs-matmul/embeddings-and-linear-layers.ipynb) for the comparison. 
:::

Extending this notion to all four input IDs

```{python}
print(embedding_layer(input_ids))
```

Now there's a continuous value representation of each token ID, there needs to be positional information implemented as well. 

## 2.8 Encoding word positions
Currently, the embedding layer converts a token ID into the same vector representation regardless of where it is located in the input sequence. Later operations conducted with the self-attention mechanism also do not take into account the position of words, it only helps with the relationship between words, it is helpful to inject positional information into the LLM.

There are two methods to do position-aware embeddings: realtive positional embeddings and absolute positional embeddings. Absolute positional embeddings are directly associated with specific positions in a sequence. Relative positional embeddings are concerened with the distance between tokens. This means the model learns the relationships in terms of "how far apart" rather than "at which exact position". Which might result in better generalization to input sequences with varying lengths.

GPT models use absolute positional embeddings that are optimized during the training process rather than being fixed or predefined like the positional encodings in the original transformer model. 

Previously, only small embedding sizes were used for simplicity. However to be realistic the input token will be encoded into a 256-dimensional verctor representation, which is smaller than GPT-3 (12,288 dimensions) but still reasonable for experiments. The vocabularly size will be inherited from the BPE tokenizer earlier (50,257). 

```{python}
vocab_size = 50257
output_dim = 256
token_embedding_layer = torch.nn.Embedding(vocab_size, output_dim)
```
Using `token_embedding_layer`, sampling data from the data loader, this will embed each token in each batch into a 256-dimensional vector. With a batch size of eight with four tokens each, the resulting tensor is 8 $\times$ 4 $\times$ 256 tensor. 

```{python}
max_length = 4
dataloader = create_dataloader_v1(
    raw_text, batch_size = 8, max_length = max_length,
    stride = max_length, shuffle=False
)
data_iter = iter(dataloader)
inputs, targets = next(data_iter)
print(f'Inputs with shape {inputs.shape}\n', inputs)
print(f'\nTargets with shape {targets.shape}\n',targets)
```

The token ID tensor is a 8 $\times$ 4 dimensional, indicating each batch consists of eight text samples with four tokens each. Implementing the embedding layer to embed these token IDs into 256-dimensional vectors:

```{python}
token_embeddings = token_embedding_layer(inputs)
print(token_embeddings.shape)
```

Now that there is a continuous value vector for each token ID, time to implement absolute embeddings which will be the same dimension as the `token_embeddings` layer.

```{python}
context_length = max_length
pos_embedding_layer = torch.nn.Embedding(context_length, output_dim)
# Assign absolute position of each token for a single batch
pos_embeddings = pos_embedding_layer(torch.arange(context_length)) 
print(pos_embeddings.shape)
```
Now the `pos_embeddings` can be added directly to each of the eight batches. 

```{python}
input_embeddings = token_embeddings + pos_embeddings # aligns by matching dimension
print(input_embeddings.shape)
```

To summarize the work done in this chapter. The input embedding pipeline before the decoder-only transformer begins its operations.

![Summary of Input Embedding Pipeline](C2_Summary_Picture.png){.lightbox}

# Summary
 - LLMs require textual data to be converted into numerical vectors, known as embeddings since they can't process raw text. Embeddings transform discrete data into continuous vector spaces, making them compatable with neural network operations. 
 - First step is to break raw text into tokens, which can be words or characters, then convert them into integer representations, termed token IDs.
 - Special tokens such as `<|unk|>` and `<|endoftext|>` can be added to enhance the models understanding and handle variability in the data. 
 - Byte pair encoding (BPE) tokenizer can efficiently handle unknown words by breaking them down into subword units or individual characters.
 - A sliding window approach on tokenized data to generate input-target paris for LLM training. 
 - Embedding layers in PyTorch function as a lookup operations, retrieving vectors for corresponding token IDs. These can be enhanced by including positional embeddings, whether they are absolute or relative. 

# Optional "Let's build the GPT Tokenizer" by Andrej Karpathy

Using [this link](https://www.youtube.com/watch?v=zduSFxRajkE) we will create the byte pair encoding tokenizer from Karpathy with the following video description.

The Tokenizer is a necessary and pervasive component of Large Language Models (LLMs), where it translates between strings and tokens (text chunks). Tokenizers are a completely separate stage of the LLM pipeline: they have their own training sets, training algorithms (Byte Pair Encoding), and after training implement two fundamental functions: encode() from strings to tokens, and decode() back from tokens to strings. In this lecture we build from scratch the Tokenizer used in the GPT series from OpenAI. In the process, we will see that a lot of weird behaviors and problems of LLMs actually trace back to tokenization. We'll go through a number of these issues, discuss why tokenization is at fault, and why someone out there ideally finds a way to delete this stage entirely.

Cool tokenizer app to see how different tokenizers work [here](https://tiktokenizer.vercel.app/)

In general, tokenization is a root cause for some errors in LLMs outputs. 
- Why can't LLM spell words? **Tokenization**.
- Why can't LLM do super simple string processing tasks like reversing a string? **Tokenization**.
- Why is LLM worse at non-English languages (e.g. Japanese)? **Tokenization**.
- Why is LLM bad at simple arithmetic? **Tokenization**.
- Why did GPT-2 have more than necessary trouble coding in Python? **Tokenization**.
- Why did my LLM abruptly halt when it sees the string "<|endoftext|>"? **Tokenization**.
- What is this weird warning I get about a "trailing whitespace"? **Tokenization**.
- Why the LLM break if I ask it about "SolidGoldMagikarp"? **Tokenization**.
- Why should I prefer to use YAML over JSON with LLMs? **Tokenization**.
- Why is LLM not actually end-to-end language modeling? **Tokenization**.
- What is the real root of suffering? **Tokenization**.

Thinking from a foundational perspective, the unicode is the backdrop of all string types in python. 

```{python}
"안녕하세요 👋 (hello in Korean!)"
```

Which we can lookup their unicode values

```{python}
[ord(x)for x in "안녕하세요 👋 (hello in Korean!)"]
```

But this is too much for our encoding perspective that we would want to use in a neural network. We could try utf-8 encoding. 

```{python}
list("안녕하세요 👋 (hello in Korean!)".encode('utf-8')) # can be utf-32 or utf-16
```

These are just byte strings, so we will have to use extremely short context lengths in the attention mechanism, but then the sequences will be extremely long. So we want to use an algorithm which will compress this idea into an efficient calculation. It's summarized [here](https://en.wikipedia.org/wiki/Byte_pair_encoding). Now let's implement it in code. 

## BPE Tokenizer


```{python}
# text from https://www.reedbeta.com/blog/programmers-intro-to-unicode/
text = "Ｕｎｉｃｏｄｅ! 🅤🅝🅘🅒🅞🅓🅔‽ 🇺‌🇳‌🇮‌🇨‌🇴‌🇩‌🇪! 😄 The very name strikes fear and awe into the hearts of programmers worldwide. We all know we ought to “support Unicode” in our software (whatever that means—like using wchar_t for all the strings, right?). But Unicode can be abstruse, and diving into the thousand-page Unicode Standard plus its dozens of supplementary annexes, reports, and notes can be more than a little intimidating. I don’t blame programmers for still finding the whole thing mysterious, even 30 years after Unicode’s inception."
tokens = text.encode("utf-8") # raw bytes
tokens = list(map(int, tokens)) # convert to a list of integers in range 0..255 for convenience
print('---')
print(text)
print("length:", len(text))
print('---')
print(tokens)
print("length:", len(tokens))
```

### Find most common pairs

```{python}
def get_stats(ids):
    counts = {}
    for pair in zip(ids, ids[1:]):
        counts[pair] = counts.get(pair,0) + 1
    return counts

stats = get_stats(tokens)
# print(list(stats.items())[:5]) # Just print first five
print(sorted(((v,k) for k,v in stats.items()),reverse=True)[:5]) # Print top 5 common pairs
```


```{python}
top_pair = max(stats, key=stats.get)
print(top_pair)
# Convert back to regular characters from utf-8 encoding
print(chr(top_pair[0]),chr(top_pair[1])) # second one is a space so it appears blank
```

### Merge into new tokens
Right now we have 255 tokens, but we want to combine popular token pairs to get another new token. So (101, 32) become the 256 token.

```{python}
def merge(ids, pair, idx):
    # in the list of ints (ids), replace all consecutive occurences of pair with new token idx
    newids = []
    i = 0
    while i < len(ids):
        # if we are not at the very last position AND the pair matches, replace it
        if i < len(ids) - 1 and ids[i] == pair[0] and ids[i+1] == pair[1]:
            newids.append(idx)
            i += 2
        else:
            newids.append(ids[i])
            i += 1
    return newids

# Example
print(merge([5,6,6,7,9,1],(6,7),99)) # Replace occurences of (6,7) with 99

# Our use case
tokens2 = merge(tokens,top_pair,256)
print(tokens2)
print('Length:', len(tokens2),'Old Length:', len(tokens))
```

### Iterate the two functions (top pair, merge)

```{python}
# making the training text longer to have more representative token statistics
# text from https://www.reedbeta.com/blog/programmers-intro-to-unicode/
text = """A Programmer’s Introduction to Unicode March 3, 2017 · Coding · 22 Comments  Ｕｎｉｃｏｄｅ! 🅤🅝🅘🅒🅞🅓🅔‽ 🇺\u200c🇳\u200c🇮\u200c🇨\u200c🇴\u200c🇩\u200c🇪! 😄 The very name strikes fear and awe into the hearts of programmers worldwide. We all know we ought to “support Unicode” in our software (whatever that means—like using wchar_t for all the strings, right?). But Unicode can be abstruse, and diving into the thousand-page Unicode Standard plus its dozens of supplementary annexes, reports, and notes can be more than a little intimidating. I don’t blame programmers for still finding the whole thing mysterious, even 30 years after Unicode’s inception.  A few months ago, I got interested in Unicode and decided to spend some time learning more about it in detail. In this article, I’ll give an introduction to it from a programmer’s point of view.  I’m going to focus on the character set and what’s involved in working with strings and files of Unicode text. However, in this article I’m not going to talk about fonts, text layout/shaping/rendering, or localization in detail—those are separate issues, beyond my scope (and knowledge) here.  Diversity and Inherent Complexity The Unicode Codespace Codespace Allocation Scripts Usage Frequency Encodings UTF-8 UTF-16 Combining Marks Canonical Equivalence Normalization Forms Grapheme Clusters And More… Diversity and Inherent Complexity As soon as you start to study Unicode, it becomes clear that it represents a large jump in complexity over character sets like ASCII that you may be more familiar with. It’s not just that Unicode contains a much larger number of characters, although that’s part of it. Unicode also has a great deal of internal structure, features, and special cases, making it much more than what one might expect a mere “character set” to be. We’ll see some of that later in this article.  When confronting all this complexity, especially as an engineer, it’s hard not to find oneself asking, “Why do we need all this? Is this really necessary? Couldn’t it be simplified?”  However, Unicode aims to faithfully represent the entire world’s writing systems. The Unicode Consortium’s stated goal is “enabling people around the world to use computers in any language”. And as you might imagine, the diversity of written languages is immense! To date, Unicode supports 135 different scripts, covering some 1100 languages, and there’s still a long tail of over 100 unsupported scripts, both modern and historical, which people are still working to add.  Given this enormous diversity, it’s inevitable that representing it is a complicated project. Unicode embraces that diversity, and accepts the complexity inherent in its mission to include all human writing systems. It doesn’t make a lot of trade-offs in the name of simplification, and it makes exceptions to its own rules where necessary to further its mission.  Moreover, Unicode is committed not just to supporting texts in any single language, but also to letting multiple languages coexist within one text—which introduces even more complexity.  Most programming languages have libraries available to handle the gory low-level details of text manipulation, but as a programmer, you’ll still need to know about certain Unicode features in order to know when and how to apply them. It may take some time to wrap your head around it all, but don’t be discouraged—think about the billions of people for whom your software will be more accessible through supporting text in their language. Embrace the complexity!  The Unicode Codespace Let’s start with some general orientation. The basic elements of Unicode—its “characters”, although that term isn’t quite right—are called code points. Code points are identified by number, customarily written in hexadecimal with the prefix “U+”, such as U+0041 “A” latin capital letter a or U+03B8 “θ” greek small letter theta. Each code point also has a short name, and quite a few other properties, specified in the Unicode Character Database.  The set of all possible code points is called the codespace. The Unicode codespace consists of 1,114,112 code points. However, only 128,237 of them—about 12% of the codespace—are actually assigned, to date. There’s plenty of room for growth! Unicode also reserves an additional 137,468 code points as “private use” areas, which have no standardized meaning and are available for individual applications to define for their own purposes.  Codespace Allocation To get a feel for how the codespace is laid out, it’s helpful to visualize it. Below is a map of the entire codespace, with one pixel per code point. It’s arranged in tiles for visual coherence; each small square is 16×16 = 256 code points, and each large square is a “plane” of 65,536 code points. There are 17 planes altogether.  Map of the Unicode codespace (click to zoom)  White represents unassigned space. Blue is assigned code points, green is private-use areas, and the small red area is surrogates (more about those later). As you can see, the assigned code points are distributed somewhat sparsely, but concentrated in the first three planes.  Plane 0 is also known as the “Basic Multilingual Plane”, or BMP. The BMP contains essentially all the characters needed for modern text in any script, including Latin, Cyrillic, Greek, Han (Chinese), Japanese, Korean, Arabic, Hebrew, Devanagari (Indian), and many more.  (In the past, the codespace was just the BMP and no more—Unicode was originally conceived as a straightforward 16-bit encoding, with only 65,536 code points. It was expanded to its current size in 1996. However, the vast majority of code points in modern text belong to the BMP.)  Plane 1 contains historical scripts, such as Sumerian cuneiform and Egyptian hieroglyphs, as well as emoji and various other symbols. Plane 2 contains a large block of less-common and historical Han characters. The remaining planes are empty, except for a small number of rarely-used formatting characters in Plane 14; planes 15–16 are reserved entirely for private use.  Scripts Let’s zoom in on the first three planes, since that’s where the action is:  Map of scripts in Unicode planes 0–2 (click to zoom)  This map color-codes the 135 different scripts in Unicode. You can see how Han () and Korean () take up most of the range of the BMP (the left large square). By contrast, all of the European, Middle Eastern, and South Asian scripts fit into the first row of the BMP in this diagram.  Many areas of the codespace are adapted or copied from earlier encodings. For example, the first 128 code points of Unicode are just a copy of ASCII. This has clear benefits for compatibility—it’s easy to losslessly convert texts from smaller encodings into Unicode (and the other direction too, as long as no characters outside the smaller encoding are used).  Usage Frequency One more interesting way to visualize the codespace is to look at the distribution of usage—in other words, how often each code point is actually used in real-world texts. Below is a heat map of planes 0–2 based on a large sample of text from Wikipedia and Twitter (all languages). Frequency increases from black (never seen) through red and yellow to white.  Heat map of code point usage frequency in Unicode planes 0–2 (click to zoom)  You can see that the vast majority of this text sample lies in the BMP, with only scattered usage of code points from planes 1–2. The biggest exception is emoji, which show up here as the several bright squares in the bottom row of plane 1.  Encodings We’ve seen that Unicode code points are abstractly identified by their index in the codespace, ranging from U+0000 to U+10FFFF. But how do code points get represented as bytes, in memory or in a file?  The most convenient, computer-friendliest (and programmer-friendliest) thing to do would be to just store the code point index as a 32-bit integer. This works, but it consumes 4 bytes per code point, which is sort of a lot. Using 32-bit ints for Unicode will cost you a bunch of extra storage, memory, and performance in bandwidth-bound scenarios, if you work with a lot of text.  Consequently, there are several more-compact encodings for Unicode. The 32-bit integer encoding is officially called UTF-32 (UTF = “Unicode Transformation Format”), but it’s rarely used for storage. At most, it comes up sometimes as a temporary internal representation, for examining or operating on the code points in a string.  Much more commonly, you’ll see Unicode text encoded as either UTF-8 or UTF-16. These are both variable-length encodings, made up of 8-bit or 16-bit units, respectively. In these schemes, code points with smaller index values take up fewer bytes, which saves a lot of memory for typical texts. The trade-off is that processing UTF-8/16 texts is more programmatically involved, and likely slower.  UTF-8 In UTF-8, each code point is stored using 1 to 4 bytes, based on its index value.  UTF-8 uses a system of binary prefixes, in which the high bits of each byte mark whether it’s a single byte, the beginning of a multi-byte sequence, or a continuation byte; the remaining bits, concatenated, give the code point index. This table shows how it works:  UTF-8 (binary)\tCode point (binary)\tRange 0xxxxxxx\txxxxxxx\tU+0000–U+007F 110xxxxx 10yyyyyy\txxxxxyyyyyy\tU+0080–U+07FF 1110xxxx 10yyyyyy 10zzzzzz\txxxxyyyyyyzzzzzz\tU+0800–U+FFFF 11110xxx 10yyyyyy 10zzzzzz 10wwwwww\txxxyyyyyyzzzzzzwwwwww\tU+10000–U+10FFFF A handy property of UTF-8 is that code points below 128 (ASCII characters) are encoded as single bytes, and all non-ASCII code points are encoded using sequences of bytes 128–255. This has a couple of nice consequences. First, any strings or files out there that are already in ASCII can also be interpreted as UTF-8 without any conversion. Second, lots of widely-used string programming idioms—such as null termination, or delimiters (newlines, tabs, commas, slashes, etc.)—will just work on UTF-8 strings. ASCII bytes never occur inside the encoding of non-ASCII code points, so searching byte-wise for a null terminator or a delimiter will do the right thing.  Thanks to this convenience, it’s relatively simple to extend legacy ASCII programs and APIs to handle UTF-8 strings. UTF-8 is very widely used in the Unix/Linux and Web worlds, and many programmers argue UTF-8 should be the default encoding everywhere.  However, UTF-8 isn’t a drop-in replacement for ASCII strings in all respects. For instance, code that iterates over the “characters” in a string will need to decode UTF-8 and iterate over code points (or maybe grapheme clusters—more about those later), not bytes. When you measure the “length” of a string, you’ll need to think about whether you want the length in bytes, the length in code points, the width of the text when rendered, or something else.  UTF-16 The other encoding that you’re likely to encounter is UTF-16. It uses 16-bit words, with each code point stored as either 1 or 2 words.  Like UTF-8, we can express the UTF-16 encoding rules in the form of binary prefixes:  UTF-16 (binary)\tCode point (binary)\tRange xxxxxxxxxxxxxxxx\txxxxxxxxxxxxxxxx\tU+0000–U+FFFF 110110xxxxxxxxxx 110111yyyyyyyyyy\txxxxxxxxxxyyyyyyyyyy + 0x10000\tU+10000–U+10FFFF A more common way that people talk about UTF-16 encoding, though, is in terms of code points called “surrogates”. All the code points in the range U+D800–U+DFFF—or in other words, the code points that match the binary prefixes 110110 and 110111 in the table above—are reserved specifically for UTF-16 encoding, and don’t represent any valid characters on their own. They’re only meant to occur in the 2-word encoding pattern above, which is called a “surrogate pair”. Surrogate code points are illegal in any other context! They’re not allowed in UTF-8 or UTF-32 at all.  Historically, UTF-16 is a descendant of the original, pre-1996 versions of Unicode, in which there were only 65,536 code points. The original intention was that there would be no different “encodings”; Unicode was supposed to be a straightforward 16-bit character set. Later, the codespace was expanded to make room for a long tail of less-common (but still important) Han characters, which the Unicode designers didn’t originally plan for. Surrogates were then introduced, as—to put it bluntly—a kludge, allowing 16-bit encodings to access the new code points.  Today, Javascript uses UTF-16 as its standard string representation: if you ask for the length of a string, or iterate over it, etc., the result will be in UTF-16 words, with any code points outside the BMP expressed as surrogate pairs. UTF-16 is also used by the Microsoft Win32 APIs; though Win32 supports either 8-bit or 16-bit strings, the 8-bit version unaccountably still doesn’t support UTF-8—only legacy code-page encodings, like ANSI. This leaves UTF-16 as the only way to get proper Unicode support in Windows. (Update: in Win10 version 1903, they finally added UTF-8 support to the 8-bit APIs! 😊)  By the way, UTF-16’s words can be stored either little-endian or big-endian. Unicode has no opinion on that issue, though it does encourage the convention of putting U+FEFF zero width no-break space at the top of a UTF-16 file as a byte-order mark, to disambiguate the endianness. (If the file doesn’t match the system’s endianness, the BOM will be decoded as U+FFFE, which isn’t a valid code point.)  Combining Marks In the story so far, we’ve been focusing on code points. But in Unicode, a “character” can be more complicated than just an individual code point!  Unicode includes a system for dynamically composing characters, by combining multiple code points together. This is used in various ways to gain flexibility without causing a huge combinatorial explosion in the number of code points.  In European languages, for example, this shows up in the application of diacritics to letters. Unicode supports a wide range of diacritics, including acute and grave accents, umlauts, cedillas, and many more. All these diacritics can be applied to any letter of any alphabet—and in fact, multiple diacritics can be used on a single letter.  If Unicode tried to assign a distinct code point to every possible combination of letter and diacritics, things would rapidly get out of hand. Instead, the dynamic composition system enables you to construct the character you want, by starting with a base code point (the letter) and appending additional code points, called “combining marks”, to specify the diacritics. When a text renderer sees a sequence like this in a string, it automatically stacks the diacritics over or under the base letter to create a composed character.  For example, the accented character “Á” can be expressed as a string of two code points: U+0041 “A” latin capital letter a plus U+0301 “◌́” combining acute accent. This string automatically gets rendered as a single character: “Á”.  Now, Unicode does also include many “precomposed” code points, each representing a letter with some combination of diacritics already applied, such as U+00C1 “Á” latin capital letter a with acute or U+1EC7 “ệ” latin small letter e with circumflex and dot below. I suspect these are mostly inherited from older encodings that were assimilated into Unicode, and kept around for compatibility. In practice, there are precomposed code points for most of the common letter-with-diacritic combinations in European-script languages, so they don’t use dynamic composition that much in typical text.  Still, the system of combining marks does allow for an arbitrary number of diacritics to be stacked on any base character. The reductio-ad-absurdum of this is Zalgo text, which works by ͖͟ͅr͞aṋ̫̠̖͈̗d͖̻̹óm̪͙͕̗̝ļ͇̰͓̳̫ý͓̥̟͍ ̕s̫t̫̱͕̗̰̼̘͜a̼̩͖͇̠͈̣͝c̙͍k̖̱̹͍͘i̢n̨̺̝͇͇̟͙ģ̫̮͎̻̟ͅ ̕n̼̺͈͞u̮͙m̺̭̟̗͞e̞͓̰̤͓̫r̵o̖ṷs҉̪͍̭̬̝̤ ̮͉̝̞̗̟͠d̴̟̜̱͕͚i͇̫̼̯̭̜͡ḁ͙̻̼c̲̲̹r̨̠̹̣̰̦i̱t̤̻̤͍͙̘̕i̵̜̭̤̱͎c̵s ͘o̱̲͈̙͖͇̲͢n͘ ̜͈e̬̲̠̩ac͕̺̠͉h̷̪ ̺̣͖̱ḻ̫̬̝̹ḙ̙̺͙̭͓̲t̞̞͇̲͉͍t̷͔̪͉̲̻̠͙e̦̻͈͉͇r͇̭̭̬͖,̖́ ̜͙͓̣̭s̘̘͈o̱̰̤̲ͅ ̛̬̜̙t̼̦͕̱̹͕̥h̳̲͈͝ͅa̦t̻̲ ̻̟̭̦̖t̛̰̩h̠͕̳̝̫͕e͈̤̘͖̞͘y҉̝͙ ̷͉͔̰̠o̞̰v͈͈̳̘͜er̶f̰͈͔ḻ͕̘̫̺̲o̲̭͙͠ͅw̱̳̺ ͜t̸h͇̭͕̳͍e̖̯̟̠ ͍̞̜͔̩̪͜ļ͎̪̲͚i̝̲̹̙̩̹n̨̦̩̖ḙ̼̲̼͢ͅ ̬͝s̼͚̘̞͝p͙̘̻a̙c҉͉̜̤͈̯̖i̥͡n̦̠̱͟g̸̗̻̦̭̮̟ͅ ̳̪̠͖̳̯̕a̫͜n͝d͡ ̣̦̙ͅc̪̗r̴͙̮̦̹̳e͇͚̞͔̹̫͟a̙̺̙ț͔͎̘̹ͅe̥̩͍ a͖̪̜̮͙̹n̢͉̝ ͇͉͓̦̼́a̳͖̪̤̱p̖͔͔̟͇͎͠p̱͍̺ę̲͎͈̰̲̤̫a̯͜r̨̮̫̣̘a̩̯͖n̹̦̰͎̣̞̞c̨̦̱͔͎͍͖e̬͓͘ ̤̰̩͙̤̬͙o̵̼̻̬̻͇̮̪f̴ ̡̙̭͓͖̪̤“̸͙̠̼c̳̗͜o͏̼͙͔̮r̞̫̺̞̥̬ru̺̻̯͉̭̻̯p̰̥͓̣̫̙̤͢t̳͍̳̖ͅi̶͈̝͙̼̙̹o̡͔n̙̺̹̖̩͝ͅ”̨̗͖͚̩.̯͓  A few other places where dynamic character composition shows up in Unicode:  Vowel-pointing notation in Arabic and Hebrew. In these languages, words are normally spelled with some of their vowels left out. They then have diacritic notation to indicate the vowels (used in dictionaries, language-teaching materials, children’s books, and such). These diacritics are expressed with combining marks.  A Hebrew example, with niqqud:\tאֶת דַלְתִּי הֵזִיז הֵנִיעַ, קֶטֶב לִשְׁכַּתִּי יָשׁוֹד Normal writing (no niqqud):\tאת דלתי הזיז הניע, קטב לשכתי ישוד Devanagari, the script used to write Hindi, Sanskrit, and many other South Asian languages, expresses certain vowels as combining marks attached to consonant letters. For example, “ह” + “\u200bि” = “हि” (“h” + “i” = “hi”). Korean characters stand for syllables, but they are composed of letters called jamo that stand for the vowels and consonants in the syllable. While there are code points for precomposed Korean syllables, it’s also possible to dynamically compose them by concatenating their jamo. For example, “ᄒ” + “ᅡ” + “ᆫ” = “한” (“h” + “a” + “n” = “han”). Canonical Equivalence In Unicode, precomposed characters exist alongside the dynamic composition system. A consequence of this is that there are multiple ways to express “the same” string—different sequences of code points that result in the same user-perceived characters. For example, as we saw earlier, we can express the character “Á” either as the single code point U+00C1, or as the string of two code points U+0041 U+0301.  Another source of ambiguity is the ordering of multiple diacritics in a single character. Diacritic order matters visually when two diacritics apply to the same side of the base character, e.g. both above: “ǡ” (dot, then macron) is different from “ā̇” (macron, then dot). However, when diacritics apply to different sides of the character, e.g. one above and one below, then the order doesn’t affect rendering. Moreover, a character with multiple diacritics might have one of the diacritics precomposed and others expressed as combining marks.  For example, the Vietnamese letter “ệ” can be expressed in five different ways:  Fully precomposed: U+1EC7 “ệ” Partially precomposed: U+1EB9 “ẹ” + U+0302 “◌̂” Partially precomposed: U+00EA “ê” + U+0323 “◌̣” Fully decomposed: U+0065 “e” + U+0323 “◌̣” + U+0302 “◌̂” Fully decomposed: U+0065 “e” + U+0302 “◌̂” + U+0323 “◌̣” Unicode refers to set of strings like this as “canonically equivalent”. Canonically equivalent strings are supposed to be treated as identical for purposes of searching, sorting, rendering, text selection, and so on. This has implications for how you implement operations on text. For example, if an app has a “find in file” operation and the user searches for “ệ”, it should, by default, find occurrences of any of the five versions of “ệ” above!  Normalization Forms To address the problem of “how to handle canonically equivalent strings”, Unicode defines several normalization forms: ways of converting strings into a canonical form so that they can be compared code-point-by-code-point (or byte-by-byte).  The “NFD” normalization form fully decomposes every character down to its component base and combining marks, taking apart any precomposed code points in the string. It also sorts the combining marks in each character according to their rendered position, so e.g. diacritics that go below the character come before the ones that go above the character. (It doesn’t reorder diacritics in the same rendered position, since their order matters visually, as previously mentioned.)  The “NFC” form, conversely, puts things back together into precomposed code points as much as possible. If an unusual combination of diacritics is called for, there may not be any precomposed code point for it, in which case NFC still precomposes what it can and leaves any remaining combining marks in place (again ordered by rendered position, as in NFD).  There are also forms called NFKD and NFKC. The “K” here refers to compatibility decompositions, which cover characters that are “similar” in some sense but not visually identical. However, I’m not going to cover that here.  Grapheme Clusters As we’ve seen, Unicode contains various cases where a thing that a user thinks of as a single “character” might actually be made up of multiple code points under the hood. Unicode formalizes this using the notion of a grapheme cluster: a string of one or more code points that constitute a single “user-perceived character”.  UAX #29 defines the rules for what, precisely, qualifies as a grapheme cluster. It’s approximately “a base code point followed by any number of combining marks”, but the actual definition is a bit more complicated; it accounts for things like Korean jamo, and emoji ZWJ sequences.  The main thing grapheme clusters are used for is text editing: they’re often the most sensible unit for cursor placement and text selection boundaries. Using grapheme clusters for these purposes ensures that you can’t accidentally chop off some diacritics when you copy-and-paste text, that left/right arrow keys always move the cursor by one visible character, and so on.  Another place where grapheme clusters are useful is in enforcing a string length limit—say, on a database field. While the true, underlying limit might be something like the byte length of the string in UTF-8, you wouldn’t want to enforce that by just truncating bytes. At a minimum, you’d want to “round down” to the nearest code point boundary; but even better, round down to the nearest grapheme cluster boundary. Otherwise, you might be corrupting the last character by cutting off a diacritic, or interrupting a jamo sequence or ZWJ sequence.  And More… There’s much more that could be said about Unicode from a programmer’s perspective! I haven’t gotten into such fun topics as case mapping, collation, compatibility decompositions and confusables, Unicode-aware regexes, or bidirectional text. Nor have I said anything yet about implementation issues—how to efficiently store and look-up data about the sparsely-assigned code points, or how to optimize UTF-8 decoding, string comparison, or NFC normalization. Perhaps I’ll return to some of those things in future posts.  Unicode is a fascinating and complex system. It has a many-to-one mapping between bytes and code points, and on top of that a many-to-one (or, under some circumstances, many-to-many) mapping between code points and “characters”. It has oddball special cases in every corner. But no one ever claimed that representing all written languages was going to be easy, and it’s clear that we’re never going back to the bad old days of a patchwork of incompatible encodings.  Further reading:  The Unicode Standard UTF-8 Everywhere Manifesto Dark corners of Unicode by Eevee ICU (International Components for Unicode)—C/C++/Java libraries implementing many Unicode algorithms and related things Python 3 Unicode Howto Google Noto Fonts—set of fonts intended to cover all assigned code points"""
tokens = text.encode("utf-8") # raw bytes
tokens = list(map(int, tokens)) # convert to a list of integers in range 0..255 for convenience
```


```{python}
def get_stats(ids):
    counts = {}
    for pair in zip(ids, ids[1:]):
        counts[pair] = counts.get(pair, 0) + 1
    return counts

def merge(ids, pair, idx):
  newids = []
  i = 0
  while i < len(ids):
    if i < len(ids) - 1 and ids[i] == pair[0] and ids[i+1] == pair[1]:
      newids.append(idx)
      i += 2
    else:
      newids.append(ids[i])
      i += 1
  return newids

# ---
vocab_size = 276 # the desired final vocabulary size (will give us 20 merges)
num_merges = vocab_size - 256
ids = list(tokens) # copy so we don't destroy the original list

merges = {} # (int, int) -> int (child1,child2) -> token
for i in range(num_merges):
  stats = get_stats(ids) # get pairs
  pair = max(stats, key=stats.get) # get top pair for replacement
  idx = 256 + i # new token value
  print(f"merging {pair} into a new token {idx}")
  ids = merge(ids, pair, idx) # replace old pair with new token
  merges[pair] = idx # update dictionary

# Efficiency metric
print("Original Tokens Length:", len(tokens))
print("New IDs Length:", len(ids))
print(f"Compression Ratio: {len(tokens) / len(ids):.2f}X")
```

#### Decoding
Given a sequence of integers, what is the text? (Inverse of the tokenization)

```{python}
vocab = {idx: bytes([idx]) for idx in range(256)}
for (p0, p1), idx in merges.items():
    vocab[idx] = vocab[p0] + vocab[p1]

def decode(ids):
  # given ids (list of integers), return Python string
  tokens = b"".join(vocab[idx] for idx in ids)
  text = tokens.decode("utf-8", errors="replace") # errors="replace" is error handling (replaces with special character)
  # Not every sequence of tokens is valid utf-8...
  return text

print(decode([128]))
```

#### Encoding
Given a string, what are the tokens?

```{python}
def encode(text):
    # given a string, return list of integers (tokens)
    tokens = list(text.encode('utf-8')) # convert to utf-8
    while len(tokens) >= 2: # Run unless combined all aka while True: but for 1 token case
        stats = get_stats(tokens) # Get pairs (id, id)
        # Id pair with lowest index to combine lower counts we see
        pair = min(stats , key = lambda p: merges.get(p,float('inf'))) 
        if pair not in merges:
            break # Nothing else can be merged
        idx = merges[pair]
        tokens = merge(tokens, pair, idx)
    return tokens
print(encode('hello world'))
```

Check both ways. Here's text that would be new to our tokenizer (so the error handling will kick in a lot)

```{python}
valtext = "Many common characters, including numerals, punctuation, and other symbols, are unified within the standard and are not treated as specific to any given writing system. Unicode encodes thousands of emoji, with the continued development thereof conducted by the Consortium as a part of the standard.[4] Moreover, the widespread adoption of Unicode was in large part responsible for the initial popularization of emoji outside of Japan. Unicode is ultimately capable of encoding more than 1.1 million characters."
valtext2 = decode(encode(valtext))
print(valtext2 == valtext)
```